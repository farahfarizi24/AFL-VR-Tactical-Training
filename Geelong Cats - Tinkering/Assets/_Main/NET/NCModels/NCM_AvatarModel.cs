using Normal.Realtime.Serialization;
using Normal.Realtime;

/// <summary>
/// IMPORTANT:
/// 
/// RealtimeProperty(propertyID, realiableOrUnreliable, changeEvent)
/// 
/// - PropertyID
///     This is a unique ID that is used by Normcore to identify this property 
///     among others when sending data to and from the server. This ID must be 
///     unique to the model, and if you make any changes to this property, 
///     you'll need to assign a new ID. This will ensure that newer versions of 
///     your application can still communicate with older versions. If you would 
///     like to delete this field, make sure to retire its property ID. Comment 
///     out the field and leave it in your source code so you can see previously 
///     used property IDs.
/// 
/// </summary>

namespace com.DU.CE.NET.NCM
{
    [RealtimeModel]
    public partial class NCM_AvatarModel
    {
        [RealtimeProperty(1, true, true)]
        private int _number;

        [RealtimeProperty(2, true, true)]
        private int _team;

        [RealtimeProperty(3, true, true)]
        private bool _isSelected;

        [RealtimeProperty(4, true, true)]
        private bool _isActivated;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace com.DU.CE.NET.NCM {
    public partial class NCM_AvatarModel : RealtimeModel {
        public int number {
            get {
                return _cache.LookForValueInCache(_number, entry => entry.numberSet, entry => entry.number);
            }
            set {
                if (this.number == value) return;
                _cache.UpdateLocalCache(entry => { entry.numberSet = true; entry.number = value; return entry; });
                InvalidateReliableLength();
                FireNumberDidChange(value);
            }
        }
        
        public int team {
            get {
                return _cache.LookForValueInCache(_team, entry => entry.teamSet, entry => entry.team);
            }
            set {
                if (this.team == value) return;
                _cache.UpdateLocalCache(entry => { entry.teamSet = true; entry.team = value; return entry; });
                InvalidateReliableLength();
                FireTeamDidChange(value);
            }
        }
        
        public bool isSelected {
            get {
                return _cache.LookForValueInCache(_isSelected, entry => entry.isSelectedSet, entry => entry.isSelected);
            }
            set {
                if (this.isSelected == value) return;
                _cache.UpdateLocalCache(entry => { entry.isSelectedSet = true; entry.isSelected = value; return entry; });
                InvalidateReliableLength();
                FireIsSelectedDidChange(value);
            }
        }
        
        public bool isActivated {
            get {
                return _cache.LookForValueInCache(_isActivated, entry => entry.isActivatedSet, entry => entry.isActivated);
            }
            set {
                if (this.isActivated == value) return;
                _cache.UpdateLocalCache(entry => { entry.isActivatedSet = true; entry.isActivated = value; return entry; });
                InvalidateReliableLength();
                FireIsActivatedDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(NCM_AvatarModel model, T value);
        public event PropertyChangedHandler<int> numberDidChange;
        public event PropertyChangedHandler<int> teamDidChange;
        public event PropertyChangedHandler<bool> isSelectedDidChange;
        public event PropertyChangedHandler<bool> isActivatedDidChange;
        
        private struct LocalCacheEntry {
            public bool numberSet;
            public int number;
            public bool teamSet;
            public int team;
            public bool isSelectedSet;
            public bool isSelected;
            public bool isActivatedSet;
            public bool isActivated;
        }
        
        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
        public enum PropertyID : uint {
            Number = 1,
            Team = 2,
            IsSelected = 3,
            IsActivated = 4,
        }
        
        public NCM_AvatarModel() : this(null) {
        }
        
        public NCM_AvatarModel(RealtimeModel parent) : base(null, parent) {
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            UnsubscribeClearCacheCallback();
        }
        
        private void FireNumberDidChange(int value) {
            try {
                numberDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireTeamDidChange(int value) {
            try {
                teamDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireIsSelectedDidChange(bool value) {
            try {
                isSelectedDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireIsActivatedDidChange(bool value) {
            try {
                isActivatedDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            int length = 0;
            if (context.fullModel) {
                FlattenCache();
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Number, (uint)_number);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Team, (uint)_team);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsSelected, _isSelected ? 1u : 0u);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsActivated, _isActivated ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.numberSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Number, (uint)entry.number);
                }
                if (entry.teamSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Team, (uint)entry.team);
                }
                if (entry.isSelectedSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.IsSelected, entry.isSelected ? 1u : 0u);
                }
                if (entry.isActivatedSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.IsActivated, entry.isActivated ? 1u : 0u);
                }
            }
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var didWriteProperties = false;
            
            if (context.fullModel) {
                stream.WriteVarint32((uint)PropertyID.Number, (uint)_number);
                stream.WriteVarint32((uint)PropertyID.Team, (uint)_team);
                stream.WriteVarint32((uint)PropertyID.IsSelected, _isSelected ? 1u : 0u);
                stream.WriteVarint32((uint)PropertyID.IsActivated, _isActivated ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.numberSet || entry.teamSet || entry.isSelectedSet || entry.isActivatedSet) {
                    _cache.PushLocalCacheToInflight(context.updateID);
                    ClearCacheOnStreamCallback(context);
                }
                if (entry.numberSet) {
                    stream.WriteVarint32((uint)PropertyID.Number, (uint)entry.number);
                    didWriteProperties = true;
                }
                if (entry.teamSet) {
                    stream.WriteVarint32((uint)PropertyID.Team, (uint)entry.team);
                    didWriteProperties = true;
                }
                if (entry.isSelectedSet) {
                    stream.WriteVarint32((uint)PropertyID.IsSelected, entry.isSelected ? 1u : 0u);
                    didWriteProperties = true;
                }
                if (entry.isActivatedSet) {
                    stream.WriteVarint32((uint)PropertyID.IsActivated, entry.isActivated ? 1u : 0u);
                    didWriteProperties = true;
                }
                
                if (didWriteProperties) InvalidateReliableLength();
            }
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                switch (propertyID) {
                    case (uint)PropertyID.Number: {
                        int previousValue = _number;
                        _number = (int)stream.ReadVarint32();
                        bool numberExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.numberSet);
                        if (!numberExistsInChangeCache && _number != previousValue) {
                            FireNumberDidChange(_number);
                        }
                        break;
                    }
                    case (uint)PropertyID.Team: {
                        int previousValue = _team;
                        _team = (int)stream.ReadVarint32();
                        bool teamExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.teamSet);
                        if (!teamExistsInChangeCache && _team != previousValue) {
                            FireTeamDidChange(_team);
                        }
                        break;
                    }
                    case (uint)PropertyID.IsSelected: {
                        bool previousValue = _isSelected;
                        _isSelected = (stream.ReadVarint32() != 0);
                        bool isSelectedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isSelectedSet);
                        if (!isSelectedExistsInChangeCache && _isSelected != previousValue) {
                            FireIsSelectedDidChange(_isSelected);
                        }
                        break;
                    }
                    case (uint)PropertyID.IsActivated: {
                        bool previousValue = _isActivated;
                        _isActivated = (stream.ReadVarint32() != 0);
                        bool isActivatedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isActivatedSet);
                        if (!isActivatedExistsInChangeCache && _isActivated != previousValue) {
                            FireIsActivatedDidChange(_isActivated);
                        }
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
            }
        }
        
        #region Cache Operations
        
        private StreamEventDispatcher _streamEventDispatcher;
        
        private void FlattenCache() {
            _number = number;
            _team = team;
            _isSelected = isSelected;
            _isActivated = isActivated;
            _cache.Clear();
        }
        
        private void ClearCache(uint updateID) {
            _cache.RemoveUpdateFromInflight(updateID);
        }
        
        private void ClearCacheOnStreamCallback(StreamContext context) {
            if (_streamEventDispatcher != context.dispatcher) {
                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
            }
            _streamEventDispatcher = context.dispatcher;
            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
        }
        
        private void UnsubscribeClearCacheCallback() {
            if (_streamEventDispatcher != null) {
                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
                _streamEventDispatcher = null;
            }
        }
        
        #endregion
    }
}
/* ----- End Normal Autogenerated Code ----- */
