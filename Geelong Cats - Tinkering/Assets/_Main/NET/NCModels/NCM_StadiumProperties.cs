using Normal.Realtime;
using Normal.Realtime.Serialization;
using System.Collections.Generic;

namespace com.DU.CE.NET.NCM
{
    [RealtimeModel]
    public partial class NCM_StadiumProperties
    {
        [RealtimeProperty(1, true, true)]
        private int _fieldWidth;

        [RealtimeProperty(2, true, true)]
        private int _fieldLength;

        [RealtimeProperty(3, true, true)]
        private RealtimeArray<NCM_PositionMarkerModel> _markedPositions;

        [RealtimeProperty(4, true, true)]
        private bool _boardOpen;

        [RealtimeProperty(5, true, true)]
        private RealtimeArray<NCM_AvatarModel> _activatedAvatarList;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace com.DU.CE.NET.NCM {
    public partial class NCM_StadiumProperties : RealtimeModel {
        public int fieldWidth {
            get {
                return _cache.LookForValueInCache(_fieldWidth, entry => entry.fieldWidthSet, entry => entry.fieldWidth);
            }
            set {
                if (this.fieldWidth == value) return;
                _cache.UpdateLocalCache(entry => { entry.fieldWidthSet = true; entry.fieldWidth = value; return entry; });
                InvalidateReliableLength();
                FireFieldWidthDidChange(value);
            }
        }
        
        public int fieldLength {
            get {
                return _cache.LookForValueInCache(_fieldLength, entry => entry.fieldLengthSet, entry => entry.fieldLength);
            }
            set {
                if (this.fieldLength == value) return;
                _cache.UpdateLocalCache(entry => { entry.fieldLengthSet = true; entry.fieldLength = value; return entry; });
                InvalidateReliableLength();
                FireFieldLengthDidChange(value);
            }
        }
        
        public bool boardOpen {
            get {
                return _cache.LookForValueInCache(_boardOpen, entry => entry.boardOpenSet, entry => entry.boardOpen);
            }
            set {
                if (this.boardOpen == value) return;
                _cache.UpdateLocalCache(entry => { entry.boardOpenSet = true; entry.boardOpen = value; return entry; });
                InvalidateReliableLength();
                FireBoardOpenDidChange(value);
            }
        }
        
        public Normal.Realtime.Serialization.RealtimeArray<com.DU.CE.NET.NCM.NCM_PositionMarkerModel> markedPositions {
            get { return _markedPositions; }
        }
        
        public Normal.Realtime.Serialization.RealtimeArray<com.DU.CE.NET.NCM.NCM_AvatarModel> activatedAvatarList {
            get { return _activatedAvatarList; }
        }
        
        public delegate void PropertyChangedHandler<in T>(NCM_StadiumProperties model, T value);
        public event PropertyChangedHandler<int> fieldWidthDidChange;
        public event PropertyChangedHandler<int> fieldLengthDidChange;
        public event PropertyChangedHandler<bool> boardOpenDidChange;
        
        private struct LocalCacheEntry {
            public bool fieldWidthSet;
            public int fieldWidth;
            public bool fieldLengthSet;
            public int fieldLength;
            public bool boardOpenSet;
            public bool boardOpen;
        }
        
        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
        public enum PropertyID : uint {
            FieldWidth = 1,
            FieldLength = 2,
            MarkedPositions = 3,
            BoardOpen = 4,
            ActivatedAvatarList = 5,
        }
        
        public NCM_StadiumProperties() : this(null) {
        }
        
        public NCM_StadiumProperties(RealtimeModel parent) : base(null, parent) {
            RealtimeModel[] childModels = new RealtimeModel[2];
            
            _markedPositions = new Normal.Realtime.Serialization.RealtimeArray<com.DU.CE.NET.NCM.NCM_PositionMarkerModel>();
            childModels[0] = _markedPositions;
            
            _activatedAvatarList = new Normal.Realtime.Serialization.RealtimeArray<com.DU.CE.NET.NCM.NCM_AvatarModel>();
            childModels[1] = _activatedAvatarList;
            
            SetChildren(childModels);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            UnsubscribeClearCacheCallback();
        }
        
        private void FireFieldWidthDidChange(int value) {
            try {
                fieldWidthDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireFieldLengthDidChange(int value) {
            try {
                fieldLengthDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        private void FireBoardOpenDidChange(bool value) {
            try {
                boardOpenDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            int length = 0;
            if (context.fullModel) {
                FlattenCache();
                length += WriteStream.WriteVarint32Length((uint)PropertyID.FieldWidth, (uint)_fieldWidth);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.FieldLength, (uint)_fieldLength);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.BoardOpen, _boardOpen ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.fieldWidthSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.FieldWidth, (uint)entry.fieldWidth);
                }
                if (entry.fieldLengthSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.FieldLength, (uint)entry.fieldLength);
                }
                if (entry.boardOpenSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.BoardOpen, entry.boardOpen ? 1u : 0u);
                }
            }
            length += WriteStream.WriteCollectionLength((uint)PropertyID.MarkedPositions, _markedPositions, context);
            length += WriteStream.WriteCollectionLength((uint)PropertyID.ActivatedAvatarList, _activatedAvatarList, context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var didWriteProperties = false;
            
            if (context.fullModel) {
                stream.WriteVarint32((uint)PropertyID.FieldWidth, (uint)_fieldWidth);
                stream.WriteVarint32((uint)PropertyID.FieldLength, (uint)_fieldLength);
                stream.WriteVarint32((uint)PropertyID.BoardOpen, _boardOpen ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.fieldWidthSet || entry.fieldLengthSet || entry.boardOpenSet) {
                    _cache.PushLocalCacheToInflight(context.updateID);
                    ClearCacheOnStreamCallback(context);
                }
                if (entry.fieldWidthSet) {
                    stream.WriteVarint32((uint)PropertyID.FieldWidth, (uint)entry.fieldWidth);
                    didWriteProperties = true;
                }
                if (entry.fieldLengthSet) {
                    stream.WriteVarint32((uint)PropertyID.FieldLength, (uint)entry.fieldLength);
                    didWriteProperties = true;
                }
                if (entry.boardOpenSet) {
                    stream.WriteVarint32((uint)PropertyID.BoardOpen, entry.boardOpen ? 1u : 0u);
                    didWriteProperties = true;
                }
                
                if (didWriteProperties) InvalidateReliableLength();
            }
            stream.WriteCollection((uint)PropertyID.MarkedPositions, _markedPositions, context);
            stream.WriteCollection((uint)PropertyID.ActivatedAvatarList, _activatedAvatarList, context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                switch (propertyID) {
                    case (uint)PropertyID.FieldWidth: {
                        int previousValue = _fieldWidth;
                        _fieldWidth = (int)stream.ReadVarint32();
                        bool fieldWidthExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.fieldWidthSet);
                        if (!fieldWidthExistsInChangeCache && _fieldWidth != previousValue) {
                            FireFieldWidthDidChange(_fieldWidth);
                        }
                        break;
                    }
                    case (uint)PropertyID.FieldLength: {
                        int previousValue = _fieldLength;
                        _fieldLength = (int)stream.ReadVarint32();
                        bool fieldLengthExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.fieldLengthSet);
                        if (!fieldLengthExistsInChangeCache && _fieldLength != previousValue) {
                            FireFieldLengthDidChange(_fieldLength);
                        }
                        break;
                    }
                    case (uint)PropertyID.MarkedPositions: {
                        stream.ReadCollection(_markedPositions, context);
                        break;
                    }
                    case (uint)PropertyID.BoardOpen: {
                        bool previousValue = _boardOpen;
                        _boardOpen = (stream.ReadVarint32() != 0);
                        bool boardOpenExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.boardOpenSet);
                        if (!boardOpenExistsInChangeCache && _boardOpen != previousValue) {
                            FireBoardOpenDidChange(_boardOpen);
                        }
                        break;
                    }
                    case (uint)PropertyID.ActivatedAvatarList: {
                        stream.ReadCollection(_activatedAvatarList, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
            }
        }
        
        #region Cache Operations
        
        private StreamEventDispatcher _streamEventDispatcher;
        
        private void FlattenCache() {
            _fieldWidth = fieldWidth;
            _fieldLength = fieldLength;
            _boardOpen = boardOpen;
            _cache.Clear();
        }
        
        private void ClearCache(uint updateID) {
            _cache.RemoveUpdateFromInflight(updateID);
        }
        
        private void ClearCacheOnStreamCallback(StreamContext context) {
            if (_streamEventDispatcher != context.dispatcher) {
                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
            }
            _streamEventDispatcher = context.dispatcher;
            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
        }
        
        private void UnsubscribeClearCacheCallback() {
            if (_streamEventDispatcher != null) {
                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
                _streamEventDispatcher = null;
            }
        }
        
        #endregion
    }
}
/* ----- End Normal Autogenerated Code ----- */
