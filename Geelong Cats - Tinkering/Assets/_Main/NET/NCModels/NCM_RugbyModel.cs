using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace com.DU.CE.NET.NCM
{

    [RealtimeModel]
    public partial class NCM_RugbyModel
    {
        [RealtimeProperty(1, true, false)]
        private EUSERROLE _ownedBy;

        [RealtimeProperty(3, true, true)]
        private bool _isTREnabled;
    }


    }

/* ----- Begin Normal Autogenerated Code ----- */
namespace com.DU.CE.NET.NCM {
    public partial class NCM_RugbyModel : RealtimeModel {
        public EUSERROLE ownedBy {
            get {
                return _cache.LookForValueInCache(_ownedBy, entry => entry.ownedBySet, entry => entry.ownedBy);
            }
            set {
                if (this.ownedBy == value) return;
                _cache.UpdateLocalCache(entry => { entry.ownedBySet = true; entry.ownedBy = value; return entry; });
                InvalidateReliableLength();
            }
        }
        
        public bool isTREnabled {
            get {
                return _cache.LookForValueInCache(_isTREnabled, entry => entry.isTREnabledSet, entry => entry.isTREnabled);
            }
            set {
                if (this.isTREnabled == value) return;
                _cache.UpdateLocalCache(entry => { entry.isTREnabledSet = true; entry.isTREnabled = value; return entry; });
                InvalidateReliableLength();
                FireIsTREnabledDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(NCM_RugbyModel model, T value);
        public event PropertyChangedHandler<bool> isTREnabledDidChange;
        
        private struct LocalCacheEntry {
            public bool ownedBySet;
            public EUSERROLE ownedBy;
            public bool isTREnabledSet;
            public bool isTREnabled;
        }
        
        private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
        
        public enum PropertyID : uint {
            OwnedBy = 1,
            IsTREnabled = 3,
        }
        
        public NCM_RugbyModel() : this(null) {
        }
        
        public NCM_RugbyModel(RealtimeModel parent) : base(null, parent) {
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            UnsubscribeClearCacheCallback();
        }
        
        private void FireIsTREnabledDidChange(bool value) {
            try {
                isTREnabledDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            int length = 0;
            if (context.fullModel) {
                FlattenCache();
                length += WriteStream.WriteVarint32Length((uint)PropertyID.OwnedBy, (uint) _ownedBy);
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsTREnabled, _isTREnabled ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.ownedBySet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.OwnedBy, (uint) entry.ownedBy);
                }
                if (entry.isTREnabledSet) {
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.IsTREnabled, entry.isTREnabled ? 1u : 0u);
                }
            }
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var didWriteProperties = false;
            
            if (context.fullModel) {
                stream.WriteVarint32((uint)PropertyID.OwnedBy, (uint) _ownedBy);
                stream.WriteVarint32((uint)PropertyID.IsTREnabled, _isTREnabled ? 1u : 0u);
            } else if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.ownedBySet || entry.isTREnabledSet) {
                    _cache.PushLocalCacheToInflight(context.updateID);
                    ClearCacheOnStreamCallback(context);
                }
                if (entry.ownedBySet) {
                    stream.WriteVarint32((uint)PropertyID.OwnedBy, (uint) entry.ownedBy);
                    didWriteProperties = true;
                }
                if (entry.isTREnabledSet) {
                    stream.WriteVarint32((uint)PropertyID.IsTREnabled, entry.isTREnabled ? 1u : 0u);
                    didWriteProperties = true;
                }
                
                if (didWriteProperties) InvalidateReliableLength();
            }
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                switch (propertyID) {
                    case (uint)PropertyID.OwnedBy: {
                        _ownedBy = (EUSERROLE) stream.ReadVarint32();
                        break;
                    }
                    case (uint)PropertyID.IsTREnabled: {
                        bool previousValue = _isTREnabled;
                        _isTREnabled = (stream.ReadVarint32() != 0);
                        bool isTREnabledExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isTREnabledSet);
                        if (!isTREnabledExistsInChangeCache && _isTREnabled != previousValue) {
                            FireIsTREnabledDidChange(_isTREnabled);
                        }
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
            }
        }
        
        #region Cache Operations
        
        private StreamEventDispatcher _streamEventDispatcher;
        
        private void FlattenCache() {
            _ownedBy = ownedBy;
            _isTREnabled = isTREnabled;
            _cache.Clear();
        }
        
        private void ClearCache(uint updateID) {
            _cache.RemoveUpdateFromInflight(updateID);
        }
        
        private void ClearCacheOnStreamCallback(StreamContext context) {
            if (_streamEventDispatcher != context.dispatcher) {
                UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
            }
            _streamEventDispatcher = context.dispatcher;
            _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
        }
        
        private void UnsubscribeClearCacheCallback() {
            if (_streamEventDispatcher != null) {
                _streamEventDispatcher.RemoveStreamCallback(ClearCache);
                _streamEventDispatcher = null;
            }
        }
        
        #endregion
    }
}
/* ----- End Normal Autogenerated Code ----- */
