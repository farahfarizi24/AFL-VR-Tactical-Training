using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]
public partial class NCM_UserProperties
{
    [RealtimeProperty(1, true, true)]
    private string _userName;

    [RealtimeProperty(2, true, true)]
    private bool _isHoldingBall;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class NCM_UserProperties : RealtimeModel {
    public string userName {
        get {
            return _cache.LookForValueInCache(_userName, entry => entry.userNameSet, entry => entry.userName);
        }
        set {
            if (this.userName == value) return;
            _cache.UpdateLocalCache(entry => { entry.userNameSet = true; entry.userName = value; return entry; });
            InvalidateReliableLength();
            FireUserNameDidChange(value);
        }
    }
    
    public bool isHoldingBall {
        get {
            return _cache.LookForValueInCache(_isHoldingBall, entry => entry.isHoldingBallSet, entry => entry.isHoldingBall);
        }
        set {
            if (this.isHoldingBall == value) return;
            _cache.UpdateLocalCache(entry => { entry.isHoldingBallSet = true; entry.isHoldingBall = value; return entry; });
            InvalidateReliableLength();
            FireIsHoldingBallDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(NCM_UserProperties model, T value);
    public event PropertyChangedHandler<string> userNameDidChange;
    public event PropertyChangedHandler<bool> isHoldingBallDidChange;
    
    private struct LocalCacheEntry {
        public bool userNameSet;
        public string userName;
        public bool isHoldingBallSet;
        public bool isHoldingBall;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        UserName = 1,
        IsHoldingBall = 2,
    }
    
    public NCM_UserProperties() : this(null) {
    }
    
    public NCM_UserProperties(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireUserNameDidChange(string value) {
        try {
            userNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIsHoldingBallDidChange(bool value) {
        try {
            isHoldingBallDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteStringLength((uint)PropertyID.UserName, _userName);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.IsHoldingBall, _isHoldingBall ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.userNameSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.UserName, entry.userName);
            }
            if (entry.isHoldingBallSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsHoldingBall, entry.isHoldingBall ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteString((uint)PropertyID.UserName, _userName);
            stream.WriteVarint32((uint)PropertyID.IsHoldingBall, _isHoldingBall ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.userNameSet || entry.isHoldingBallSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.userNameSet) {
                stream.WriteString((uint)PropertyID.UserName, entry.userName);
                didWriteProperties = true;
            }
            if (entry.isHoldingBallSet) {
                stream.WriteVarint32((uint)PropertyID.IsHoldingBall, entry.isHoldingBall ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.UserName: {
                    string previousValue = _userName;
                    _userName = stream.ReadString();
                    bool userNameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.userNameSet);
                    if (!userNameExistsInChangeCache && _userName != previousValue) {
                        FireUserNameDidChange(_userName);
                    }
                    break;
                }
                case (uint)PropertyID.IsHoldingBall: {
                    bool previousValue = _isHoldingBall;
                    _isHoldingBall = (stream.ReadVarint32() != 0);
                    bool isHoldingBallExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isHoldingBallSet);
                    if (!isHoldingBallExistsInChangeCache && _isHoldingBall != previousValue) {
                        FireIsHoldingBallDidChange(_isHoldingBall);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _userName = userName;
        _isHoldingBall = isHoldingBall;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
